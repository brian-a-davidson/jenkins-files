#!/usr/bin/env groovy

pipeline {
   
  agent {
    docker {
      reuseNode true
      image 'nonanom/release-tools:latest'
    }
  }

  environment {
    VAULT_ADDR="http://20.118.176.12:8200"
    VAULT_MBO_PATH="projects/hazelcast"
    VAULT_APP_PATH="projects/hazelcast/version"
    VAULT_SKIP_VERIFY="true"
    ROLE_ID=credentials('vault-role-id')
    SECRET_ID=credentials('vault-secret-id')
    APP_VERSION="${params.VERSION}"
    APP_NAME="springbootadmin"
    NAMESPACE="default"
    IMAGE="image=azure_registry.azurecr.io/test/springbootadmin:${APP_VERSION}"
    TIMEOUT_VALUE="5m"
  }

  stages {
	  
	 stage('Login') {
      steps {
        sh '''
	vault login -no-store $(vault write -format=json auth/approle/login role_id=${ROLE_ID} secret_id=${SECRET_ID} | jq -r .auth.client_token)
	
	
	
        CLIENT_ID=$(vault kv get -field=azure_application_id ${VAULT_MBO_PATH}/azure)
        CLIENT_SECRET=$(vault kv get -field=azure_application_secret ${VAULT_MBO_PATH}/azure)
        TENANT_ID=$(vault kv get -field=tenant_id ${VAULT_MBO_PATH}/azure)
        SUBSCRIPTION_ID=$(vault kv get -field=subscription_id ${VAULT_MBO_PATH}/azure)
        RESOURCE_GROUP=$(vault kv get -field=azure_resource_group_name ${VAULT_MBO_PATH}/azure)
        CLUSTER_NAME=$(vault kv get -field=cluster_name ${VAULT_MBO_PATH}/azure)
        az login --output none --service-principal -u ${CLIENT_ID} -p ${CLIENT_SECRET} --tenant ${TENANT_ID}
        az account set --subscription ${SUBSCRIPTION_ID}
        az account show
        az aks get-credentials --overwrite-existing --resource-group ${RESOURCE_GROUP} --name ${CLUSTER_NAME}
        '''
      		}
	}
  }

  post {
    cleanup {
      deleteDir()
    }
  }
}
